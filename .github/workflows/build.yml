name: Build

on: push

env:
  ARTIFACT_EXTENSIONS: "dmg deb rpm exe AppImage"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # os: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Run npm install
        run: npm ci
        working-directory: .

      - name: Run Build
        run: npm run build
        working-directory: .
        
      - name: List files in dist (DEBUG)
        run: ls -R dist || echo "No dist directory found"

      - name: Filter FaynoSync artifacts for release (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p filtered
          for ext in $ARTIFACT_EXTENSIONS; do
            find dist -type f -iname "*faynosync*.$ext" -exec cp -v {} filtered/ \;
          done
          ls -lh filtered
        shell: bash
        env:
          ARTIFACT_EXTENSIONS: ${{ env.ARTIFACT_EXTENSIONS }}
      
      - name: Filter FaynoSync artifacts for release (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir filtered
          foreach ($ext in $Env:ARTIFACT_EXTENSIONS.Split(" ")) {
            Get-ChildItem -Path dist -Recurse -Filter "*faynosync*.$ext" -File | Copy-Item -Destination filtered
          }
          Get-ChildItem filtered
        shell: pwsh
        env:
          ARTIFACT_EXTENSIONS: ${{ env.ARTIFACT_EXTENSIONS }}
      
      

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            filtered/
          if-no-files-found: warn
        
  create-release:
    needs: build
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract Version
        id: extract-version
        run: |
            # Use grep to find the first occurrence of the version number matching "## 0.0.0" pattern
            version=$(grep -m 1 -oP '## \d+\.\d+\.\d+' CHANGELOG.md | cut -d ' ' -f 2)
            echo "version=$version" >> $GITHUB_ENV
        
      - name: Extract Changelog
        id: extract-changelog
        run: |
            # Extract the content between the last two version headers
            changelog=$(awk '/^## [0-9]+\.[0-9]+\.[0-9]+/{if (!version) {version=$0; next}} /^## [0-9]+\.[0-9]+\.[0-9]+/{exit} {if (version) description = description ORS $0} END {if (version) print description}' CHANGELOG.md | sed -e '/^## [0-9]+\.[0-9]+\.[0-9]+/d; s/^# //' > changelog.txt)
            echo "changelog_file=changelog.txt" >> $GITHUB_ENV
    
      - name: Download artifacts from build jobs
        uses: actions/download-artifact@v4
        with:
            path: ./artifacts
    
      - name: Show downloaded artifacts (DEBUG)
        run: ls -R ./artifacts

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body_path: ${{ env.changelog_file }}
          draft: false
          prerelease: false

      - name: Upload files to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}